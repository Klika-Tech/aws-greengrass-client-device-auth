/*
 * Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.
 * SPDX-License-Identifier: Apache-2.0
 */

#ifndef MOSQUITTO_TEST_CLIENT_GRPCCONTROLSERVER_H
#define MOSQUITTO_TEST_CLIENT_GRPCCONTROLSERVER_H

#include <future>

#include "mqtt_client_control.grpc.pb.h"                 /* autogenerated gRPC stuff */

using grpc::Server;
using grpc::ServerContext;
using grpc::Status;

namespace ClientControl {
    class Mqtt5ConnAck;
    class MqttPublishReply;
}

using ClientControl::Empty;
using ClientControl::MqttConnectReply;
using ClientControl::MqttConnectRequest;
using ClientControl::MqttCloseRequest;
using ClientControl::MqttClientControl;
using ClientControl::MqttSubscribeReply;
using ClientControl::MqttSubscribeRequest;
using ClientControl::MqttUnsubscribeRequest;
using ClientControl::MqttPublishReply;
using ClientControl::MqttPublishRequest;
using ClientControl::TLSSettings;
using ClientControl::ShutdownRequest;

class GRPCDiscoveryClient;
class MqttLib;
class MqttConnection;

/**
 * Server of gRPC MqttClientControl.
 */
class GRPCControlServer final : public MqttClientControl::Service {
public:

    /**
     * Constructor of GRPCControlServer.
     *
     * @param client the reference to client part of bi-directional gRPC link
     * @param host address to listen
     * @param port port to listen
     */
    GRPCControlServer(GRPCDiscoveryClient & client, const char * host, unsigned short port);

    /**
     * Get actual bound port.
     */
    unsigned short getPort() const { return m_choosen_port; }

    /**
     * Gets reason of shutdown received from the control.
     *
     * @return reason of shutdown received from the control
     */
    const std::string & getShutdownReason() const { return m_shutdown_reason; }

    /**
     * Handle incoming gRPC requests.
     * @return shutdown reason
     */
    void wait(MqttLib & mqtt);


    /**
     * Break waiting for new requests.
     */
    void unblockWait() { m_exit_requested.set_value(); }

    /**
     * Build gRPC address string from host and port.
     */
    static std::string buildAddress(const char * host, unsigned short port);

    /**
     * Handles ShutdownAgent gRPC request.
     *
     * @param context the gRPC context.
     * @param request the shutdown gRPC request
     * @param reply the pointer to reply to fill
     * @return status of gRPC request
     */
    Status ShutdownAgent(ServerContext * context, const ShutdownRequest * request, Empty * reply) override;

    /**
     * Handles CreateMqttConnection gRPC request.
     *
     * @param context the gRPC context.
     * @param request the connect gRPC request
     * @param reply the pointer to reply to fill
     * @return status of gRPC request
     */
    Status CreateMqttConnection(ServerContext * context, const MqttConnectRequest * request, MqttConnectReply * reply) override;

    /**
     * Handles CloseMqttConnection gRPC request.
     *
     * @param context the gRPC context.
     * @param request the close gRPC request
     * @param reply the pointer to reply to fill
     * @return status of gRPC request
     */
    Status CloseMqttConnection(ServerContext * context, const MqttCloseRequest * request, Empty * reply) override;

    /**
     * Handles SubscribeMqtt gRPC request.
     *
     * @param context the gRPC context.
     * @param request the subscribe gRPC request
     * @param reply the pointer to reply to fill
     * @return status of gRPC request
     */
    Status SubscribeMqtt(ServerContext * context, const MqttSubscribeRequest * request, MqttSubscribeReply * reply) override;

    /**
     * Handles UnsubscribeMqtt gRPC request.
     *
     * @param context the gRPC context.
     * @param request the unsubscribe gRPC request
     * @param reply the pointer to reply to fill
     * @return status of gRPC request
     */
    Status UnsubscribeMqtt(ServerContext * context, const MqttUnsubscribeRequest * request, MqttSubscribeReply * reply) override;

    /**
     * Handles PublishMqtt gRPC request.
     *
     * @param context the gRPC context.
     * @param request the publish gRPC request
     * @param reply the pointer to reply to fill
     * @return status of gRPC request
     */
    Status PublishMqtt(ServerContext * context, const MqttPublishRequest * request, MqttPublishReply * reply) override;

private:
    std::string getJoinedCA(const TLSSettings & tls_settings);

    int m_choosen_port;                 /** Bound port. */
    std::unique_ptr<Server> m_server;   /** Pointer to gRPC server. */

    GRPCDiscoveryClient & m_client;     /** Reference to gRPC client. */
    MqttLib * m_mqtt;                   /** Pointer to MQTT half. */
    std::string m_shutdown_reason;      /** String with shutdown reason as received by server from client. */
    std::promise<void> m_exit_requested;
};


#endif /* MOSQUITTO_TEST_CLIENT_GRPCCONTROLSERVER_H */
